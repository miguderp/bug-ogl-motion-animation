---
import Layout from "../layouts/Layout.astro";
---

<Layout>
	<canvas class="fixed inset-0 !size-full"></canvas>
</Layout>

<script>
	import { animate, frame } from "motion";
	import { Renderer, Camera, Transform, Program, Mesh, Box } from "ogl";

	const vertex = /* glsl */ `
		attribute vec3 position;
		attribute vec3 normal;

		uniform mat4 modelViewMatrix;
		uniform mat4 projectionMatrix;
		uniform mat3 normalMatrix;

		varying vec3 vNormal;

		void main() {
			vNormal = normalize(normalMatrix * normal);
			gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
		}
	`;

	const fragment = /* glsl */ `
		precision highp float;

		varying vec3 vNormal;

		void main() {
			vec3 normal = normalize(vNormal);
			float lighting = dot(normal, normalize(vec3(-0.3, 0.8, 0.6)));
			gl_FragColor.rgb = vec3(0.2, 0.8, 1.0) + lighting * 0.1;
			gl_FragColor.a = 1.0;
		}
	`;

	const renderer = new Renderer({ dpr: 2 });
	const gl = renderer.gl;
	document.body.appendChild(gl.canvas);
	gl.clearColor(1, 1, 1, 1);

	const camera = new Camera(gl, { fov: 35 });
	camera.position.set(0, 1, 7);
	camera.lookAt([0, 0, 0]);

	function resize() {
		renderer.setSize(window.innerWidth, window.innerHeight);
		camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });
	}
	window.addEventListener("resize", resize, false);
	resize();

	const scene = new Transform();
	const cubeGeometry = new Box(gl);
	const program = new Program(gl, {
		vertex,
		fragment,

		// Don't cull faces so that plane is double sided - default is gl.BACK
		cullFace: false,
	});

	const cube = new Mesh(gl, { geometry: cubeGeometry, program });
	cube.position.set(0, -1.3, 0);
	cube.setParent(scene);

	animate(
		cube.position,
		{ x: 1, y: 1, z: 1 },
		{
			duration: 2,
			ease: "easeInOut",
			repeat: Infinity,
			repeatType: "mirror",
		}
	);

	frame.render(update);
	function update() {
		frame.render(update);

		renderer.render({ scene, camera });
	}
</script>
